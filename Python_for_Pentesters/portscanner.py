#! /usr/bin/env python3

import thm_pythonforpentesters_lib as lib

if __name__ == '__main__':
    import argparse
    import concurrent.futures
    import csv
    parser = argparse.ArgumentParser()
    parser.add_argument('--ports', '-p', default='1-1023',
                        help='A comma separated list of ports to scan.'
                        ' Ranges can be given using a hyphen; e.g.'
                        ' "80,100-222,445,3389-4000". Default: 1-1023')
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='Provide more verbose output.')
    parser.add_argument('--ipfile', '-i', type=argparse.FileType('r'),
                        help='File with IP addresses or networks to'
                        'scan. One address/network per line. These'
                        ' will be merged with any IP addresses/networks'
                        ' provided on the commandline')
    parser.add_argument('--timeout', '-t', type=float, default=1.0,
                        help='Timeout on the socket in seconds.'
                        'Default: 1.0')
    parser.add_argument('--outfile', '-o', default='-',
                        help='The CSV file to write the results to.'
                        ' Format: "Host","Port". Default: STDOUT.')
    parser.add_argument('--threads', type=int, default=1000,
                        help='Number of connections started at once.'
                        ' Default: 1000')
    parser.add_argument('iplist', nargs='?', help='Comma-separated'
                        ' list of IP addresses to scan. It is possible'
                        ' to provide networks in CIDR notation.'
                        ' Networks and IP addresses can be mixed.')
    args = parser.parse_args()
    ports_to_scan = lib.parse_ports(args.ports)
    ips_to_scan = set()
    if args.iplist:
        ips_to_scan = lib.parse_ip_str(args.iplist)
    if args.ipfile:
        ips_from_file = lib.parse_ip_file(args.ipfile)
        ips_to_scan = ips_to_scan.union(ips_from_file)
    if len(ips_to_scan) == 0:
        print('No IP addresses provided. Exiting.', file=sys.stderr)
        sys.exit(1)
    open_ports_by_ip = list()
    for ip in ips_to_scan:
        with concurrent.futures.ThreadPoolExecutor(max_workers=args.threads) as executor:
            future_to_port = {executor.submit(lib.is_port_open, ip, port, args.timeout, args.verbose): port for port in ports_to_scan}
            for future in concurrent.futures.as_completed(future_to_port):
                port = future_to_port[future]
                if future.result():
                    open_ports_by_ip.append([ip, port])
    if args.outfile == '-':
        for ip_port_pair in open_ports_by_ip:
            print(f'"{ip_port_pair[0]}","{ip_port_pair[1]}"')
    else:
        with open(args.outfile, 'w') as fd:
            writer = csv.writer(fd, dialect='unix', quoting=csv.QUOTE_ALL)
            writer.writerows(open_ports_by_ip)

